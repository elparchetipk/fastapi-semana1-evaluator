---
name: 🤖 Evaluación Automática de Entrega

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  evaluate:
    runs-on: ubuntu-latest

    # Ejecutar en issues con labels de semana O comentarios de re-evaluación
    if: |
      (github.event_name == 'issues' && 
       (contains(github.event.issue.labels.*.name, 'semana1') || 
        contains(github.event.issue.labels.*.name, 'semana2') || 
        contains(github.event.issue.labels.*.name, 'semana3') || 
        contains(github.event.issue.labels.*.name, 'semana4') || 
        contains(github.event.issue.labels.*.name, 'semana5') ||
        contains(github.event.issue.labels.*.name, 'submission'))) ||
      (github.event_name == 'issue_comment' && 
       (contains(github.event.issue.labels.*.name, 'semana1') || 
        contains(github.event.issue.labels.*.name, 'semana2') || 
        contains(github.event.issue.labels.*.name, 'semana3') || 
        contains(github.event.issue.labels.*.name, 'semana4') || 
        contains(github.event.issue.labels.*.name, 'semana5') ||
        contains(github.event.issue.labels.*.name, 'submission')) &&
       (contains(github.event.comment.body, '/evaluar') || 
        contains(github.event.comment.body, '/re-evaluar') ||
        contains(github.event.comment.body, '/check')))

    steps:
      - name: 🚀 Checkout repositorio evaluador
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Extraer información del issue
        id: extract_info
        run: |
          echo "=== DEBUGGING WORKFLOW ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Issue labels: ${{ toJson(github.event.issue.labels) }}"

          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "Comment body: ${{ github.event.comment.body }}"
          fi

          # Extraer URL del repositorio del cuerpo del issue
          REPO_URL=$(echo "${{ github.event.issue.body }}" | \
            grep -oE 'https://github\.com/[^][:space:]]*' | head -1)

          # Si estamos procesando un comentario, intentar extraer URL del comentario también
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMENT_REPO_URL=$(echo "${{ github.event.comment.body }}" | \
              grep -oE 'https://github\.com/[^][:space:]]*' | head -1)
            if [[ -n "$COMMENT_REPO_URL" ]]; then
              REPO_URL="$COMMENT_REPO_URL"
            fi
          fi

          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "Found repository URL: $REPO_URL"

          # Determinar la semana basándose en los labels
          WEEK=""
          if [[ "${{ contains(github.event.issue.labels.*.name, 'semana-1') }}" == "true" ]] || \
             [[ "${{ contains(github.event.issue.labels.*.name, 'semana1') }}" == "true" ]]; then
            WEEK="1"
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'semana-2') }}" == "true" ]] || \
               [[ "${{ contains(github.event.issue.labels.*.name, 'semana2') }}" == "true" ]]; then
            WEEK="2"
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'semana-3') }}" == "true" ]] || \
               [[ "${{ contains(github.event.issue.labels.*.name, 'semana3') }}" == "true" ]]; then
            WEEK="3"
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'semana-4') }}" == "true" ]] || \
               [[ "${{ contains(github.event.issue.labels.*.name, 'semana4') }}" == "true" ]]; then
            WEEK="4"
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'semana-5') }}" == "true" ]] || \
               [[ "${{ contains(github.event.issue.labels.*.name, 'semana5') }}" == "true" ]]; then
            WEEK="5"
          fi
          echo "week=$WEEK" >> $GITHUB_OUTPUT
          echo "Detected week: $WEEK"

      - name: 🧪 Ejecutar evaluación automática
        id: evaluate
        run: |
          python evaluator/run.py \
            --repo-url "${{ steps.extract_info.outputs.repo_url }}" \
            --week "${{ steps.extract_info.outputs.week }}" \
            --format github
        continue-on-error: true

      - name: 📝 Comentar resultados en el issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Leer el resultado de la evaluación
            let evaluationResult = '';
            try {
              evaluationResult = fs.readFileSync('evaluation_result.md', 'utf8');
            } catch (error) {
              evaluationResult = `
              ## ❌ Error en la Evaluación
              
              No se pudo completar la evaluación automática. Posibles causas:
              
              - 🔒 **Repositorio privado**: Asegúrate de que tu repositorio sea público
              - 🔗 **URL incorrecta**: Verifica que la URL del repositorio esté correcta
              - 📁 **Estructura incorrecta**: Revisa que tengas los archivos requeridos
              - 🐛 **Error técnico**: Contacta a tu instructor para asistencia
              
              ### 📞 Siguiente paso:
              1. Verifica que tu repositorio sea **público**
              2. Asegúrate de que la URL esté correcta
              3. Revisa la estructura de archivos requerida
              4. **Para re-evaluar**: Edita este issue o comenta \`/evaluar\`
              
              ### 🔄 Métodos de Re-evaluación:
              - **Editar el issue**: Modifica la descripción y guarda
              - **Comentar**: Escribe \`/evaluar\`, \`/re-evaluar\` o \`/check\`
              - **Nueva URL**: Incluye una nueva URL en el comentario si cambió
              `;
            }

            // Determinar etiquetas a agregar
            const week = '${{ steps.extract_info.outputs.week }}';
            let labelsToAdd = [];
            let labelsToRemove = ['pendiente'];

            if (evaluationResult.includes('✅ **APROBADO**')) {
              labelsToAdd.push('aprobado');
            } else {
              labelsToAdd.push('revisar');
            }

            // Determinar el método de activación para el footer
            const triggerMethod = '${{ github.event_name }}' === 'issue_comment' ? 
              'comentario de re-evaluación' : 
              '${{ github.event.action }}' === 'edited' ? 'edición del issue' : 'creación del issue';

            // Agregar footer con información de re-evaluación
            const footerInfo = `

            ---

            ### 🔄 Re-evaluación Disponible

            **Métodos para volver a evaluar:**
            - ✏️ **Editar este issue**: Modifica la descripción y guarda los cambios
            - 💬 **Comentar**: Escribe \`/evaluar\`, \`/re-evaluar\` o \`/check\`
            - 🔗 **Nueva URL**: Incluye una nueva URL del repositorio en un comentario

            _Activado por: ${triggerMethod}_

            > 🤖 Evaluación automática generada el ${new Date().toISOString().slice(0, 19).replace('T', ' ')}`;

            // Comentar en el issue
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: evaluationResult + footerInfo
            });

            // Actualizar etiquetas
            for (const label of labelsToAdd) {
              try {
                await github.rest.issues.addLabels({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: [label]
                });
              } catch (error) {
                console.log(`Could not add label ${label}: ${error.message}`);
              }
            }

            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label
                });
              } catch (error) {
                console.log(`Could not remove label ${label}: ${error.message}`);
              }
            }

      - name: 📊 Reporte de métricas
        if: always()
        run: |
          echo "::notice title=Evaluación Completada::Semana ${{ steps.extract_info.outputs.week }} evaluada para repositorio ${{ steps.extract_info.outputs.repo_url }}"
